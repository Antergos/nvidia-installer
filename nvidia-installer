#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  nvidia-installer
#
#  Copyright Â© 2013-2017 Antergos
#
#  This file is part of Antergos.
#
#  Antergos is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  Antergos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The following additional terms are in effect as per Section 7 of the license:
#
#  The preservation of all legal notices and author attributions in
#  the material or in the Appropriate Legal Notices displayed
#  by works containing it is required.
#
#  You should have received a copy of the GNU General Public License
#  along with Antergos; If not, see <http://www.gnu.org/licenses/>.

""" nvidia-installer eases nvidia video driver installation """

import argparse
import getpass
import os
import logging
import subprocess

VERSION = "1.14"
TEST = True

LOG_FILE = "/tmp/nvidia-installer.log"

YELLOW = '\033[93m'
GREEN = '\033[92m'
RED = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'

"""
For GeForce 400 series cards and newer [NVCx and newer], install the nvidia or
    nvidia-lts package, available in the official repositories.

For GeForce 8000/9000 and 100-300 series cards [NV5x, NV8x, NV9x and NVAx] from
    around 2006-2010, install the nvidia-340xx or nvidia-340xx-lts package,
    available in the official repositories.

For GeForce 6000/7000 series cards [NV4x and NV6x] from around 2004-2006, install
    the nvidia-304xx or nvidia-304xx-lts package, available in the official
    repositories.

mesa-17.0.0-3 can now be installed side-by-side with nvidia-378.13 driver without
any libgl/libglx hacks, with the help of Fedora and upstream xorg-server patches.
"""

DEVICES = {
    "nvidia" : [
        "0x06c0", "0x06c4", "0x06ca", "0x06cd", "0x06d1", "0x06d2", "0x06d8",
        "0x06d9", "0x06da", "0x06dc", "0x06dd", "0x06de", "0x06df", "0x0dc0",
        "0x0dc4", "0x0dc5", "0x0dc6", "0x0dcd", "0x0dce", "0x0dd1", "0x0dd2",
        "0x0dd3", "0x0dd6", "0x0dd8", "0x0dda", "0x0de0", "0x0de1", "0x0de2",
        "0x0de3", "0x0de4", "0x0de5", "0x0de7", "0x0de8", "0x0de9", "0x0dea",
        "0x0deb", "0x0dec", "0x0ded", "0x0dee", "0x0def", "0x0df0", "0x0df1",
        "0x0df2", "0x0df3", "0x0df4", "0x0df5", "0x0df6", "0x0df7", "0x0df8",
        "0x0df9", "0x0dfa", "0x0dfc", "0x0e22", "0x0e23", "0x0e24", "0x0e30",
        "0x0e31", "0x0e3a", "0x0e3b", "0x0f00", "0x0f01", "0x0f02", "0x0fc0",
        "0x0fc1", "0x0fc2", "0x0fc6", "0x0fc8", "0x0fc9", "0x0fcd", "0x0fce",
        "0x0fd1", "0x0fd2", "0x0fd3", "0x0fd4", "0x0fd5", "0x0fd8", "0x0fd9",
        "0x0fdf", "0x0fe0", "0x0fe1", "0x0fe2", "0x0fe3", "0x0fe4", "0x0fe9",
        "0x0fea", "0x0fec", "0x0fef", "0x0ff2", "0x0ff3", "0x0ff6", "0x0ff8",
        "0x0ff9", "0x0ffa", "0x0ffb", "0x0ffc", "0x0ffd", "0x0ffe", "0x0fff",
        "0x1001", "0x1004", "0x1005", "0x1007", "0x1008", "0x100a", "0x100c",
        "0x1021", "0x1022", "0x1023", "0x1024", "0x1026", "0x1027", "0x1028",
        "0x1029", "0x103a", "0x103c", "0x1040", "0x1042", "0x1048", "0x1049",
        "0x104a", "0x104b", "0x104c", "0x1050", "0x1051", "0x1052", "0x1054",
        "0x1055", "0x1056", "0x1057", "0x1058", "0x1059", "0x105a", "0x105b",
        "0x107c", "0x107d", "0x1080", "0x1081", "0x1082", "0x1084", "0x1086",
        "0x1087", "0x1088", "0x1089", "0x108b", "0x1091", "0x1094", "0x1096",
        "0x109a", "0x109b", "0x1180", "0x1183", "0x1184", "0x1185", "0x1187",
        "0x1188", "0x1189", "0x118a", "0x118e", "0x118f", "0x1193", "0x1194",
        "0x1195", "0x1198", "0x1199", "0x119a", "0x119d", "0x119e", "0x119f",
        "0x11a0", "0x11a1", "0x11a2", "0x11a3", "0x11a7", "0x11b4", "0x11b6",
        "0x11b7", "0x11b8", "0x11ba", "0x11bc", "0x11bd", "0x11be", "0x11bf",
        "0x11c0", "0x11c2", "0x11c3", "0x11c4", "0x11c5", "0x11c6", "0x11c8",
        "0x11e0", "0x11e1", "0x11e2", "0x11e3", "0x11fa", "0x11fc", "0x1200",
        "0x1201", "0x1203", "0x1205", "0x1206", "0x1207", "0x1208", "0x1210",
        "0x1211", "0x1212", "0x1213", "0x1241", "0x1243", "0x1244", "0x1245",
        "0x1246", "0x1247", "0x1248", "0x1249", "0x124b", "0x124d", "0x1251",
        "0x1280", "0x1281", "0x1282", "0x1284", "0x1286", "0x1287", "0x1288",
        "0x1289", "0x128b", "0x1290", "0x1291", "0x1292", "0x1293", "0x1295",
        "0x1296", "0x1298", "0x1299", "0x12b9", "0x12ba", "0x1340", "0x1341",
        "0x1346", "0x1347", "0x1380", "0x1381", "0x1382", "0x1390", "0x1391",
        "0x1392", "0x1393", "0x139a", "0x139b", "0x13b3", "0x13ba", "0x13bb",
        "0x13bc", "0x13c0", "0x13c2", "0x13d7", "0x13d8", "0x13d9", "0x1401",
        "0x17c2", "0x17f0", "0x1140", "0x1b81"],
    "nvidia340xx" : [
        "0x0191", "0x0193", "0x0194", "0x0197", "0x019d", "0x019e", "0x0400",
        "0x0401", "0x0402", "0x0403", "0x0404", "0x0405", "0x0406", "0x0407",
        "0x0408", "0x0409", "0x040a", "0x040b", "0x040c", "0x040d", "0x040e",
        "0x040f", "0x0410", "0x0420", "0x0421", "0x0422", "0x0423", "0x0424",
        "0x0425", "0x0426", "0x0427", "0x0428", "0x0429", "0x042a", "0x042b",
        "0x042c", "0x042d", "0x042e", "0x042f", "0x05e0", "0x05e1", "0x05e2",
        "0x05e3", "0x05e6", "0x05e7", "0x05ea", "0x05eb", "0x05ed", "0x05f8",
        "0x05f9", "0x05fd", "0x05fe", "0x05ff", "0x0600", "0x0601", "0x0602",
        "0x0603", "0x0604", "0x0605", "0x0606", "0x0607", "0x0608", "0x0609",
        "0x060a", "0x060b", "0x060c", "0x060d", "0x060f", "0x0610", "0x0611",
        "0x0612", "0x0613", "0x0614", "0x0615", "0x0617", "0x0618", "0x0619",
        "0x061a", "0x061b", "0x061c", "0x061d", "0x061e", "0x061f", "0x0621",
        "0x0622", "0x0623", "0x0625", "0x0626", "0x0627", "0x0628", "0x062a",
        "0x062b", "0x062c", "0x062d", "0x062e", "0x0630", "0x0631", "0x0632",
        "0x0635", "0x0637", "0x0638", "0x063a", "0x0640", "0x0641", "0x0643",
        "0x0644", "0x0645", "0x0646", "0x0647", "0x0648", "0x0649", "0x064a",
        "0x064b", "0x064c", "0x0651", "0x0652", "0x0653", "0x0654", "0x0658",
        "0x0659", "0x065a", "0x065b", "0x065c", "0x06c0", "0x06c4", "0x06ca",
        "0x06cd", "0x06d1", "0x06d2", "0x06d8", "0x06d9", "0x06da", "0x06dc",
        "0x06dd", "0x06de", "0x06df", "0x06e0", "0x06e1", "0x06e2", "0x06e3",
        "0x06e4", "0x06e5", "0x06e6", "0x06e7", "0x06e8", "0x06e9", "0x06ea",
        "0x06eb", "0x06ec", "0x06ef", "0x06f1", "0x06f8", "0x06f9", "0x06fa",
        "0x06fb", "0x06fd", "0x06ff", "0x0840", "0x0844", "0x0845", "0x0846",
        "0x0847", "0x0848", "0x0849", "0x084a", "0x084b", "0x084c", "0x084d",
        "0x084f", "0x0860", "0x0861", "0x0862", "0x0863", "0x0864", "0x0865",
        "0x0866", "0x0867", "0x0868", "0x0869", "0x086a", "0x086c", "0x086d",
        "0x086e", "0x086f", "0x0870", "0x0871", "0x0872", "0x0873", "0x0874",
        "0x0876", "0x087a", "0x087d", "0x087e", "0x087f", "0x08a0", "0x08a2",
        "0x08a3", "0x08a4", "0x08a5", "0x0a20", "0x0a22", "0x0a23", "0x0a26",
        "0x0a27", "0x0a28", "0x0a29", "0x0a2a", "0x0a2b", "0x0a2c", "0x0a2d",
        "0x0a32", "0x0a34", "0x0a35", "0x0a38", "0x0a3c", "0x0a60", "0x0a62",
        "0x0a63", "0x0a64", "0x0a65", "0x0a66", "0x0a67", "0x0a68", "0x0a69",
        "0x0a6a", "0x0a6c", "0x0a6e", "0x0a6f", "0x0a70", "0x0a71", "0x0a72",
        "0x0a73", "0x0a74", "0x0a75", "0x0a76", "0x0a78", "0x0a7a", "0x0a7c",
        "0x0ca0", "0x0ca2", "0x0ca3", "0x0ca4", "0x0ca5", "0x0ca7", "0x0ca8",
        "0x0ca9", "0x0cac", "0x0caf", "0x0cb0", "0x0cb1", "0x0cbc", "0x0dc0",
        "0x0dc4", "0x0dc5", "0x0dc6", "0x0dcd", "0x0dce", "0x0dd1", "0x0dd2",
        "0x0dd3", "0x0dd6", "0x0dd8", "0x0dda", "0x0de0", "0x0de1", "0x0de2",
        "0x0de3", "0x0de4", "0x0de5", "0x0de7", "0x0de8", "0x0de9", "0x0dea",
        "0x0deb", "0x0dec", "0x0ded", "0x0dee", "0x0def", "0x0df0", "0x0df1",
        "0x0df2", "0x0df3", "0x0df4", "0x0df5", "0x0df6", "0x0df7", "0x0df8",
        "0x0df9", "0x0dfa", "0x0dfc", "0x0e22", "0x0e23", "0x0e24", "0x0e30",
        "0x0e31", "0x0e3a", "0x0e3b", "0x0f00", "0x0f01", "0x0f02", "0x0fc0",
        "0x0fc1", "0x0fc2", "0x0fc6", "0x0fc8", "0x0fcd", "0x0fce", "0x0fd1",
        "0x0fd2", "0x0fd3", "0x0fd4", "0x0fd5", "0x0fd8", "0x0fd9", "0x0fdf",
        "0x0fe0", "0x0fe1", "0x0fe2", "0x0fe3", "0x0fe4", "0x0fe9", "0x0fea",
        "0x0fec", "0x0fef", "0x0ff2", "0x0ff3", "0x0ff6", "0x0ff8", "0x0ff9",
        "0x0ffa", "0x0ffb", "0x0ffc", "0x0ffd", "0x0ffe", "0x0fff", "0x1001",
        "0x1004", "0x1005", "0x1007", "0x1008", "0x100a", "0x100c", "0x1021",
        "0x1022", "0x1023", "0x1024", "0x1026", "0x1027", "0x1028", "0x1029",
        "0x103a", "0x103c", "0x1040", "0x1042", "0x1048", "0x1049", "0x104a",
        "0x104b", "0x104c", "0x1050", "0x1051", "0x1052", "0x1054", "0x1055",
        "0x1056", "0x1057", "0x1058", "0x1059", "0x105a", "0x105b", "0x107c",
        "0x107d", "0x1080", "0x1081", "0x1082", "0x1084", "0x1086", "0x1087",
        "0x1088", "0x1089", "0x108b", "0x1091", "0x1094", "0x1096", "0x109a",
        "0x109b", "0x10c0", "0x10c3", "0x10c5", "0x10d8", "0x1180", "0x1183",
        "0x1184", "0x1185", "0x1187", "0x1188", "0x1189", "0x118a", "0x118e",
        "0x118f", "0x1193", "0x1194", "0x1195", "0x1198", "0x1199", "0x119a",
        "0x119d", "0x119e", "0x119f", "0x11a0", "0x11a1", "0x11a2", "0x11a3",
        "0x11a7", "0x11b4", "0x11b6", "0x11b7", "0x11b8", "0x11ba", "0x11bc",
        "0x11bd", "0x11be", "0x11bf", "0x11c0", "0x11c2", "0x11c3", "0x11c4",
        "0x11c5", "0x11c6", "0x11c8", "0x11e0", "0x11e1", "0x11e2", "0x11e3",
        "0x11fa", "0x11fc", "0x1200", "0x1201", "0x1203", "0x1205", "0x1206",
        "0x1207", "0x1208", "0x1210", "0x1211", "0x1212", "0x1213", "0x1241",
        "0x1243", "0x1244", "0x1245", "0x1246", "0x1247", "0x1248", "0x1249",
        "0x124b", "0x124d", "0x1251", "0x1280", "0x1281", "0x1282", "0x1284",
        "0x1286", "0x1287", "0x1288", "0x1290", "0x1291", "0x1292", "0x1293",
        "0x1295", "0x1296", "0x1298", "0x12b9", "0x12ba", "0x1340", "0x1341",
        "0x1380", "0x1381", "0x1382", "0x1390", "0x1391", "0x1392", "0x1393",
        "0x13ba", "0x13bb", "0x1140"],
    "nvidia304xx" : [
        "0x0040", "0x0041", "0x0042", "0x0043", "0x0044", "0x0045", "0x0046",
        "0x0047", "0x0048", "0x004e", "0x0090", "0x0091", "0x0092", "0x0093",
        "0x0095", "0x0098", "0x0099", "0x009d", "0x00c0", "0x00c1", "0x00c2",
        "0x00c3", "0x00c8", "0x00c9", "0x00cc", "0x00cd", "0x00ce", "0x00f1",
        "0x00f2", "0x00f3", "0x00f4", "0x00f5", "0x00f6", "0x00f8", "0x00f9",
        "0x0140", "0x0141", "0x0142", "0x0143", "0x0144", "0x0145", "0x0146",
        "0x0147", "0x0148", "0x0149", "0x014a", "0x014c", "0x014d", "0x014e",
        "0x014f", "0x0160", "0x0161", "0x0162", "0x0163", "0x0164", "0x0165",
        "0x0166", "0x0167", "0x0168", "0x0169", "0x016a", "0x0191", "0x0193",
        "0x0194", "0x0197", "0x019d", "0x019e", "0x01d0", "0x01d1", "0x01d2",
        "0x01d3", "0x01d6", "0x01d7", "0x01d8", "0x01da", "0x01db", "0x01dc",
        "0x01dd", "0x01de", "0x01df", "0x0221", "0x0222", "0x0240", "0x0241",
        "0x0242", "0x0244", "0x0245", "0x0247", "0x0290", "0x0291", "0x0292",
        "0x0293", "0x0294", "0x0295", "0x0297", "0x0298", "0x0299", "0x029a",
        "0x029b", "0x029c", "0x029d", "0x029e", "0x029f", "0x02e0", "0x02e1",
        "0x02e2", "0x02e3", "0x02e4", "0x038b", "0x0390", "0x0391", "0x0392",
        "0x0393", "0x0394", "0x0395", "0x0397", "0x0398", "0x0399", "0x039c",
        "0x039e", "0x03d0", "0x03d1", "0x03d2", "0x03d5", "0x03d6", "0x0400",
        "0x0401", "0x0402", "0x0403", "0x0404", "0x0405", "0x0406", "0x0407",
        "0x0408", "0x0409", "0x040a", "0x040b", "0x040c", "0x040d", "0x040e",
        "0x040f", "0x0410", "0x0420", "0x0421", "0x0422", "0x0423", "0x0424",
        "0x0425", "0x0426", "0x0427", "0x0428", "0x0429", "0x042a", "0x042b",
        "0x042c", "0x042d", "0x042e", "0x042f", "0x0531", "0x0533", "0x053a",
        "0x053b", "0x053e", "0x05e0", "0x05e1", "0x05e2", "0x05e3", "0x05e6",
        "0x05e7", "0x05ea", "0x05eb", "0x05ed", "0x05f8", "0x05f9", "0x05fd",
        "0x05fe", "0x05ff", "0x0600", "0x0601", "0x0602", "0x0603", "0x0604",
        "0x0605", "0x0606", "0x0607", "0x0608", "0x0609", "0x060a", "0x060b",
        "0x060c", "0x060d", "0x060f", "0x0610", "0x0611", "0x0612", "0x0613",
        "0x0614", "0x0615", "0x0617", "0x0618", "0x0619", "0x061a", "0x061b",
        "0x061c", "0x061d", "0x061e", "0x061f", "0x0621", "0x0622", "0x0623",
        "0x0625", "0x0626", "0x0627", "0x0628", "0x062a", "0x062b", "0x062c",
        "0x062d", "0x062e", "0x0630", "0x0631", "0x0632", "0x0635", "0x0637",
        "0x0638", "0x063a", "0x0640", "0x0641", "0x0643", "0x0644", "0x0645",
        "0x0646", "0x0647", "0x0648", "0x0649", "0x064a", "0x064b", "0x064c",
        "0x0651", "0x0652", "0x0653", "0x0654", "0x0656", "0x0658", "0x0659",
        "0x065a", "0x065b", "0x065c", "0x06c0", "0x06c4", "0x06ca", "0x06cd",
        "0x06d1", "0x06d2", "0x06d8", "0x06d9", "0x06da", "0x06dc", "0x06dd",
        "0x06de", "0x06df", "0x06e0", "0x06e1", "0x06e2", "0x06e3", "0x06e4",
        "0x06e5", "0x06e6", "0x06e7", "0x06e8", "0x06e9", "0x06ea", "0x06eb",
        "0x06ec", "0x06ef", "0x06f1", "0x06f8", "0x06f9", "0x06fa", "0x06fb",
        "0x06fd", "0x06ff", "0x07e0", "0x07e1", "0x07e2", "0x07e3", "0x07e5",
        "0x0840", "0x0844", "0x0845", "0x0846", "0x0847", "0x0848", "0x0849",
        "0x084a", "0x084b", "0x084c", "0x084d", "0x084f", "0x0860", "0x0861",
        "0x0862", "0x0863", "0x0864", "0x0865", "0x0866", "0x0867", "0x0868",
        "0x0869", "0x086a", "0x086c", "0x086d", "0x086e", "0x086f", "0x0870",
        "0x0871", "0x0872", "0x0873", "0x0874", "0x0876", "0x087a", "0x087d",
        "0x087e", "0x087f", "0x08a0", "0x08a2", "0x08a3", "0x08a4", "0x08a5",
        "0x0a20", "0x0a22", "0x0a23", "0x0a26", "0x0a27", "0x0a28", "0x0a29",
        "0x0a2a", "0x0a2b", "0x0a2c", "0x0a2d", "0x0a32", "0x0a34", "0x0a35",
        "0x0a38", "0x0a3c", "0x0a60", "0x0a62", "0x0a63", "0x0a64", "0x0a65",
        "0x0a66", "0x0a67", "0x0a68", "0x0a69", "0x0a6a", "0x0a6c", "0x0a6e",
        "0x0a6f", "0x0a70", "0x0a71", "0x0a72", "0x0a73", "0x0a74", "0x0a75",
        "0x0a76", "0x0a78", "0x0a7a", "0x0a7c", "0x0ca0", "0x0ca2", "0x0ca3",
        "0x0ca4", "0x0ca5", "0x0ca7", "0x0ca8", "0x0ca9", "0x0cac", "0x0caf",
        "0x0cb0", "0x0cb1", "0x0cbc", "0x0dc0", "0x0dc4", "0x0dc5", "0x0dc6",
        "0x0dcd", "0x0dce", "0x0dd1", "0x0dd2", "0x0dd3", "0x0dd6", "0x0dd8",
        "0x0dda", "0x0de0", "0x0de1", "0x0de2", "0x0de3", "0x0de4", "0x0de5",
        "0x0de8", "0x0de9", "0x0dea", "0x0deb", "0x0dec", "0x0ded", "0x0dee",
        "0x0def", "0x0df0", "0x0df1", "0x0df2", "0x0df3", "0x0df4", "0x0df5",
        "0x0df6", "0x0df7", "0x0df8", "0x0df9", "0x0dfa", "0x0dfc", "0x0e22",
        "0x0e23", "0x0e24", "0x0e30", "0x0e31", "0x0e3a", "0x0e3b", "0x0f00",
        "0x0f01", "0x0fc0", "0x0fc1", "0x0fc2", "0x0fc6", "0x0fce", "0x0fd1",
        "0x0fd2", "0x0fd3", "0x0fd4", "0x0fd5", "0x0fd8", "0x0fd9", "0x0fe0",
        "0x0ff2", "0x0ffb", "0x0ffc", "0x0ffd", "0x0fff", "0x1022", "0x1028",
        "0x1040", "0x1042", "0x1048", "0x1049", "0x104a", "0x1050", "0x1051",
        "0x1052", "0x1054", "0x1055", "0x1056", "0x1057", "0x1058", "0x1059",
        "0x105a", "0x107d", "0x1080", "0x1081", "0x1082", "0x1084", "0x1086",
        "0x1087", "0x1088", "0x1089", "0x108b", "0x1091", "0x1094", "0x1096",
        "0x109a", "0x109b", "0x10c0", "0x10c3", "0x10c5", "0x10d8", "0x1180",
        "0x1183", "0x1185", "0x1188", "0x1189", "0x118f", "0x11a0", "0x11a1",
        "0x11a7", "0x11ba", "0x11bc", "0x11bd", "0x11be", "0x11bf", "0x11c0",
        "0x11c6", "0x1200", "0x1201", "0x1203", "0x1205", "0x1206", "0x1207",
        "0x1208", "0x1210", "0x1211", "0x1212", "0x1213", "0x1241", "0x1243",
        "0x1244", "0x1245", "0x1246", "0x1247", "0x1248", "0x1249", "0x124b",
        "0x124d", "0x1251"]}

CLASS_ID = "0x03"
VENDOR_ID = "0x10de"

PACKAGES = {
    "nouveau": ["xf86-video-nouveau", "mesa"],
    "nvidia": ["nvidia", "libvdpau"],
    "nvidia340xx": ["nvidia-340xx", "libvdpau"],
    "nvidia304xx": ["nvidia-304xx", "libvdpau"],
    "bumblebee": ["bumblebee", "mesa", "xf86-video-intel",
                  "nvidia", "virtualgl", "nvidia-settings", "bbswitch"]}

PACKAGES_LTS = {
    "nouveau": [],
    "nvidia": ["nvidia-lts"],
    "nvidia340xx": ["nvidia-340xx-lts"],
    "nvidia304xx": ["nvidia-304xx-lts"],
    "bumblebee": ["nvidia-lts", "bbswitch-dkms"]}

PACKAGES_X86_64 = {
    "nouveau": ["lib32-mesa"],
    "nvidia": ["lib32-nvidia-utils", "lib32-libvdpau"],
    "nvidia340xx": ["lib32-nvidia-340xx-utils", "lib32-libvdpau"],
    "nvidia304xx": ["lib32-nvidia-304xx-utils", "lib32-libvdpau"],
    "bumblebee": ["lib32-nvidia-utils", "lib32-virtualgl", "lib32-mesa"]}

CONFLICTS = {
    "nouveau": ["nvidia", "nvidia-lts" "nvidia-utils", "nvidia-libgl",
                "nvidia-340xx", "nvidia-340xx-lts", "nvidia-340xx-utils",
                "nvidia-304xx", "nvidia-304xx-lts", "nvidia-304xx-utils",
                "bumblebee", "virtualgl", "nvidia-settings", "bbswitch", "bbswitch-lts"],
    "nvidia": ["xf86-video-nouveau"],
    "nvidia340xx": ["xf86-video-nouveau"],
    "nvidia304xx": ["xf86-video-nouveau"],
    "bumblebee": ["xf86-video-nouveau", "nvidia-libgl", "nvidia-340xx-utils",
                  "nvidia-304xx-utils"]}

CONFLICTS_X86_64 = {
    "nouveau": ["lib32-nvidia-libgl", "lib32-nvidia-340xx-utils",
                "lib32-nvidia-304xx-utils", "lib32-nvidia-utils", "lib32-virtualgl"],
    "nvidia": ["lib32-nvidia-libgl", "lib32-nvidia-340xx-utils",
               "lib32-nvidia-304xx-utils"],
    "nvidia340xx": ["lib32-nvidia-libgl", "lib32-nvidia-utils",
                    "lib32-nvidia-304xx-utils"],
    "nvidia304xx": ["lib32-nvidia-libgl", "lib32-nvidia-utils",
                    "lib32-nvidia-340xx-utils"],
    "bumblebee": ["lib32-nvidia-libgl", "lib32-nvidia-340xx-utils",
                  "lib32-nvidia-304xx-utils"]}


def get_class_vendor_product(line):
    """ Parses lspci -n output line """
    line = line.split()
    class_id = "0x{0}".format(line[1].rstrip(":")[0:2])
    dev = line[2].split(":")
    vendor_id = "0x{0}".format(dev[0])
    product_id = "0x{0}".format(dev[1])
    return (class_id, vendor_id, product_id)


def check_device():
    """ Tries to guess if a device suitable for this driver is present """
    try:
        cmd = ["lspci", "-n"]
        lines = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        lines = lines.decode().split("\n")
    except subprocess.CalledProcessError as err:
        log_warning("Cannot detect hardware components : {}".format(err.output.decode()))
        return None

    for line in lines:
        if line:
            class_id, vendor_id, product_id = get_class_vendor_product(line)

            if class_id == CLASS_ID and vendor_id == VENDOR_ID:
                for driver in DEVICES:
                    if product_id in DEVICES[driver]:
                        return driver
    return None


def install(driver):
    """ Performs packages installation """

    packages = PACKAGES[driver]
    conflicts = CONFLICTS[driver]

    if os.uname()[-1] == "x86_64":
        packages.extend(PACKAGES_X86_64[driver])
        conflicts.extend(CONFLICTS_X86_64[driver])

    if os.path.exists('/boot/vmlinuz-linux-lts'):
        packages.extend(PACKAGES_LTS[driver])

    log_info("Removing conflicting packages...")
    installed_packages = get_installed_packages()

    cmd = ["pacman", "-Rs", "--noconfirm", "--noprogressbar", "--nodeps"]
    for conflict in conflicts:
        if conflict in installed_packages:
            if TEST:
                log_info(" ".join(cmd + [conflict]))
            else:
                try:
                    subprocess.check_output(cmd + [conflict], stderr=subprocess.STDOUT)
                except subprocess.CalledProcessError as err:
                    msg = "Cannot remove conflicting package {0}: {1}"
                    log_error(msg.format(conflict, err.output.decode()))
                    return False

    log_info("Downloading and installing driver packages, please wait...")
    cmd = ["pacman", "-Sqy", "--noconfirm", "--noprogressbar"]
    cmd.extend(packages)
    if TEST:
        log_info(" ".join(cmd))
    else:
        try:
            subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as err:
            msg = "Cannot install required packages: {}"
            log_error(msg.format(err.output.decode()))
            return False

    return True


def get_installed_packages():
    """ Gets a list of all installed packages """
    installed_packages = []
    try:
        cmd = ["pacman", "-Q"]
        res = subprocess.check_output(cmd, stderr=subprocess.STDOUT).decode().split('\n')
        for line in res:
            line = line.split()
            if line:
                installed_packages.append(line[0])
    except subprocess.CalledProcessError as err:
        msg = "Cannot check installed packages (pacman -Q): {}"
        log_warning(msg.format(err.output.decode()))
    except OSError as err:
        msg = "Cannot check installed packages (pacman -Q): {}"
        log_warning(msg.format(err))
    return installed_packages


def add_user_to_group(user, group):
    """ Adds user to group in system """
    log_info("Adding user {0} to {1} group...".format(user, group))
    cmd = ["gpasswd", "-a", user, group]
    log_info(" ".join(cmd))
    if not TEST:
        try:
            subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as err:
            msg = "Cannot add user {0} to the {1} group: {2}"
            log_warning(msg.format(user, group, err.output.decode()))


def get_user():
    """ Gets current username """
    user = None
    try:
        user = os.environ['SUDO_USER']
    except KeyError:
        user = getpass.getuser()
    return user


def enable_service(service, enable=True):
    """ Enables service using systemctl """
    if not service.endswith(".service"):
        service += ".service"

    if os.path.exists("/usr/lib/systemd/system/{}".format(service)):
        cmd = ["systemctl"]
        if enable:
            log_info("Enabling {} service...".format(service))
            cmd += ["enable", service]
        else:
            log_info("Disabling {} service...".format(service))
            cmd += ["disable", service]
        log_info(" ".join(cmd))
        if not TEST:
            try:
                subprocess.check_output(cmd, stderr=subprocess.STDOUT)
            except subprocess.CalledProcessError as err:
                msg = "Cannot enable/disable {0} service: {1}"
                log_warning(msg.format(service, err.output.decode()))


def patch_nvidia_settings(patch=True):
    """ Fixes nvidia-settings.desktop """
    desktop_path = "/usr/share/applications/nvidia-settings.desktop"
    if os.path.exists(desktop_path):
        if patch:
            log_info("Patching {}...".format(desktop_path))
            sed = 's|Exec=/usr/bin/nvidia-settings|Exec=optirun -b none /usr/bin/nvidia-settings -c :8|'
            cmd = ["sed", "-i", sed, desktop_path]
        else:
            log_info("Unpatching {}...".format(desktop_path))
            sed = 's|Exec=optirun -b none /usr/bin/nvidia-settings -c :8|Exec=/usr/bin/nvidia-settings|'
            cmd = ["sed", "-i", sed, desktop_path]

        if TEST:
            log_info(" ".join(cmd))
        else:
            try:
                subprocess.check_output(cmd, stderr=subprocess.STDOUT)
            except subprocess.CalledProcessError as err:
                msg = "Cannot modify {0} file : {1}"
                log_warning(msg.format(desktop_path, err.output.decode()))


def remove_file(path):
    """ Removes file if exists """
    if os.path.exists(path):
        log_info("Removing {} file...".format(path))
        if not TEST:
            os.remove(path)
    else:
        log_info("{} not found. That's ok.".format(path))

def create_nvidia_conf(path):
    """ Creates specific Xorg nvidia setup """
    log_info("Creating {} file...".format(path))
    if not TEST:
        with open(path, 'w') as nvidia:
            nvidia.write('Section "Device"\n')
            nvidia.write('    Identifier "Nvidia Card"\n')
            nvidia.write('    Driver "nvidia"\n')
            nvidia.write('    VendorName "NVIDIA Corporation"\n')
            nvidia.write('    Option "NoLogo" "true"\n')
            nvidia.write('EndSection\n')

def post_install(driver):
    """ Run post installation actions here """

    nvidia_conf_path = "/etc/X11/xorg.conf.d/20-nvidia.conf"

    if driver == "bumblebee":
        user = get_user()
        if user != "root":
            add_user_to_group(user, "bumblebee")
            add_user_to_group(user, "video")
        else:
            msg = "NOT adding user 'root' to bumblebee or video groups! " \
                "Remember to add your users to those groups"
            log_warning(msg)

        enable_service("bumblebeed.service")
        patch_nvidia_settings()
    else:
        # not bumblebee
        enable_service("bumblebeed.service", False)
        patch_nvidia_settings(False)

    if driver.startswith("nvidia"):
        create_nvidia_conf(nvidia_conf_path)
    else:
        # bumblebee and nouveau
        remove_file(nvidia_conf_path)

    fix_mkinitcpio()


def fix_mkinitcpio():
    """ Removes nouveau and nvidia from MODULES line in mkinitcpio.conf """

    mkinitcpio_path = "/etc/mkinitcpio.conf"

    # Read mkinitcpio.conf
    with open(mkinitcpio_path) as mkinitcpio_file:
        mklines = mkinitcpio_file.readlines()

    modified = False
    new_mklines = []
    for line in mklines:
        # Remove nouveau and nvidia from MODULES line (just in case)
        if line.startswith("MODULES"):
            if "nouveau" in line or "nvidia" in line:
                old_line = line
                line = line.replace("nouveau", "")
                line = line.replace("nvidia", "")
                line = line.replace(",,", ",")
                line = line.replace('",', '"')
                line = line.replace(',"', '"')
                msg = "{0} will be changed to {1} in {2}"
                log_info(msg.format(old_line.strip("\n"), line.strip("\n"), mkinitcpio_path))
                modified = True
        new_mklines.append(line)

    if modified and not TEST:
        try:
            with open(mkinitcpio_path, "w") as mkinitcpio_file:
                for line in new_mklines:
                    mkinitcpio_file.write(line)

            cmd = ["mkinitcpio", "-p", "linux"]
            res = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
            res = res.decode().split('\n')

            if os.path.exists('/boot/vmlinuz-linux-lts'):
                cmd = ["mkinitcpio", "-p", "linux-lts"]
                res = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
                res = res.decode().split('\n')
        except subprocess.CalledProcessError as err:
            msg = "Cannot run {0}: {1}, please run it manually before rebooting!"
            log_warning(msg.format(' '.join(cmd), err))
        except PermissionError:
            log_error("This script must be run with administrative privileges!")


def parse_options():
    """ Parse command line options """
    desc = "Antergos Nvidia Installer v{0}".format(VERSION)
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument(
        "-b", "--bumblebee",
        help="For Nvidia Optimus cards (Bumblebee + proprietary Nvidia drivers)",
        action='store_true')

    parser.add_argument(
        "-f", "--force",
        help="Force driver installation even if a nvidia card is not detected",
        action="store_true")

    parser.add_argument(
        "-t", "--test",
        help="Test mode. Nothing in your system will be modified",
        action="store_true")

    parser.add_argument(
        "-q", "--quiet",
        help="Supress log messages",
        action="store_true")

    parser.add_argument(
        "-n", "--nouveau",
        help="Restores nouveau (open) nvidia driver",
        action="store_true")

    return parser.parse_args()


def setup_logging(cmd_line):
    """ Configure our logger """
    logger = logging.getLogger()

    logger.handlers = []

    log_level = logging.INFO

    logger.setLevel(log_level)

    #context_filter = ContextFilter()
    #logger.addFilter(context_filter.filter)

    # Log format
    formatter = logging.Formatter(
        fmt="%(asctime)s [%(levelname)s]: %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S")

    # File logger
    try:
        file_handler = logging.FileHandler(LOG_FILE, mode='w')
        file_handler.setLevel(log_level)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    except PermissionError as permission_error:
        log_error("Can't open {0} : {1}".format(LOG_FILE, permission_error))

    # Stdout logger
    if not cmd_line.quiet:
        stream_handler = logging.StreamHandler()
        stream_handler.setLevel(log_level)
        stream_handler.setFormatter(formatter)
        logger.addHandler(stream_handler)

    log_info("Antergos Nvidia Installer v{}".format(VERSION))
    log_info("All logs will be stored in {}".format(LOG_FILE))


def log_error(msg):
    """ Log error message """
    logging.error(RED + msg + ENDC)


def log_warning(msg):
    """ Log warning message """
    logging.warning(YELLOW + msg + ENDC)


def log_info(msg):
    """ Log information message """
    logging.info(GREEN + msg + ENDC)


def main():
    """ Main program """
    # Command line options
    cmd_line = parse_options()

    setup_logging(cmd_line)

    global TEST
    TEST = cmd_line.test

    if not TEST and os.getuid() != 0:
        log_error("This installer must be run with administrative privileges (use sudo)")
        return
    elif TEST and os.getuid() == 0:
        log_error("Do not run this installer in test mode with administrative privileges")
        return

    if TEST:
        log_info("Running the installer in testing mode...")

    if cmd_line.bumblebee:
        driver = "bumblebee"
    elif cmd_line.nouveau:
        driver = "nouveau"
    else:
        driver = check_device()

    if not driver and cmd_line.force:
        msg = "Your graphics card is not in our database. " \
            "Forcing nvidia driver installation anyways..."
        log_warning(msg)
        driver = "nvidia"

    if driver:
        log_info("Installing {} driver...".format(driver))
        if install(driver):
            post_install(driver)
            # The nvidia package contains a file which blacklists the nouveau
            # module, so rebooting is necessary.
            if TEST:
                msg = "Installation finished. Nothing has been modified as testing mode was ON."
                log_info(msg)
            else:
                log_info("Installation finished. You need to reboot now!")
    else:
        log_error("Couldn't find a driver suitable for your graphics card.")


if __name__ == "__main__":
    main()
